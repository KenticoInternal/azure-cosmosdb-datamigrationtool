using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Microsoft.Azure.CosmosDB.Table;

namespace Microsoft.DataTransfer.AzureTable.Utils
{
    using Microsoft.Azure.Storage;
    using System;
    using System.Threading.Tasks;

    /// <summary>
    /// Utility functions
    /// </summary>
    public static class Utils
    {
        /// <summary>
        /// Execute an operation with retries
        /// </summary>
        /// <param name="func">Function to execute</param>
        /// <param name="retries">Number of retries</param>
        public static async Task ExecuteWithRetryAsync(Func<Task> func, int retries = 3)
        {
            while (retries > 0)
            {
                try
                {
                    await func();
                    break;
                }
                catch (StorageException ex)
                {
                    retries--;
                    if (retries == 0)
                    {
                        if (ex.RequestInformation.HttpStatusCode == 429)
                        {
                            throw new StorageException("The table's allocated RUs are too low " +
                                                       "to support the request rate generated by this process, " +
                                                       " please either reduce batch size, " +
                                                       "increase RUs or wait until total table load is reduced");
                        }
                        else
                        {
                            throw;
                        }
                    }

                    await Task.Delay(3000);
                }
            }
        }

        /// <summary>
        /// Execute an operation with retries
        /// </summary>
        /// <param name="func">Function to execute</param>
        /// <param name="retries">Number of retries</param>
        public static async Task<T> ExecuteWithRetryAsync<T>(Func<Task<T>> func, int retries = 3)
        {
            while (retries > 0)
            {
                try
                {
                    return await func();
                }
                catch (StorageException ex)
                {
                    retries--;
                    if (retries == 0)
                    {
                        if (ex.RequestInformation.HttpStatusCode == 429)
                        {
                            throw new StorageException("The table's allocated RUs are too low " +
                                                       "to support the request rate generated by this process, " +
                                                       " please either reduce batch size, " +
                                                       "increase RUs or wait until total table load is reduced");
                        }
                        else
                        {
                            throw;
                        }
                    }

                    await Task.Delay(3000);
                }
            }

            throw new InvalidOperationException("This should never happen");
        }

        public static async Task<IList<DynamicTableEntity>> GetRange(this CloudTable table, string partitionKey, string start, string end)
        {
            string prefixCondition = TableQuery.CombineFilters(
                TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.GreaterThanOrEqual, start),
                TableOperators.And,
                TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.LessThanOrEqual, end)
            );

            string filterString = TableQuery.CombineFilters(
                TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, partitionKey),
                TableOperators.And,
                prefixCondition
            );

            var query = new TableQuery<DynamicTableEntity>().Where(filterString).Select(new List<string> { "PartitionKey", "RowKey" });
            var querySegment = await ExecuteWithRetryAsync(() => table.ExecuteQuerySegmentedAsync(query, null));
            var results = querySegment.Results;
            while (querySegment.ContinuationToken != null)
            {
                querySegment = await ExecuteWithRetryAsync(() => table.ExecuteQuerySegmentedAsync(query, querySegment.ContinuationToken));
                results.AddRange(querySegment.Results);
            }

            return results;
        }
    }
}
